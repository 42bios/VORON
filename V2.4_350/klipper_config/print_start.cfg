[gcode_macro PRINT_START]
##  User Paramaters
##  BED_TEMP      : Target temperature for the Bed. Is also used to decide 
##                  if heatsoak is needed
##  EXTRUDER_TEMP : Target temperature for the Extruder
##  CHAMBER_TEMP  : Target temperature for the chamber fan controll
##  SOAK          : Soak time in minutes
##  DELTA_B       : Allowed delta between actual bed temperature and target
##                  temperature for the decision if heat soak is needed.
##  DELTA_C       : Allowed delta between actual chamber temperature and target
##                  will wait until target reached or time is zero
##  CHAMBER_SOAK  : Extra Soak time if Chamber is not on target - DELTA_C
##  EXTRA_SOAK    : Enables Chamber Soak ('true'/'false')
default_parameter_BED_TEMP: 100
default_parameter_EXTRUDER_TEMP: 245
default_parameter_CHAMBER_TEMP: 45
default_parameter_SOAK: 30
default_parameter_DELTA_B: 20
default_parameter_DELTA_C: 10
default_parameter_CHAMBER_SOAK: 15
default_parameter_EXTRA_SOAK: 'true'
##  System Varables
variable_redo_qgl: 'true'
variable_soak_tval: 0
# change this to define the wait time per call
variable_soak_ival: 1
variable_soak_chamber: 40
variable_soak_tchamber: 0
variable_extruder: 245
## Valid Status 
##   Prepare : decision if heat Soak is needed 
##   HeatSoak: loop the time specified with SOAK
##   Chamber : wait for chamber reached CHAMBER_HEAT_SOAK 
##   Final   : all what needs to be done after wait timet
variable_status: 'Prepare'
variable_activ: 'false'
variable_first: 'true'
gcode:
  ##  Prepare phase only dome at the first exection of PRINT_START
  {% if printer["gcode_macro PRINT_START"].status == 'Prepare' %}
    #############  Variable Setup  #############
    SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE='"false"'
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=activ VALUE='"true"'
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=first VALUE='"true"'
    # get actual temp from the bed either use an external sensor
    # or the sensor from the bed heater
    # external sensor must be named bed
    {% set targetTemp = BED_TEMP|int - DELTA_B|int%}
    {% if 'temperature_sensor bed' in printer %}
      {% set actTemp = printer['temperature_sensor bed'].temperature %}
    {% else %}
      {% set actTemp = printer.heater_bed.temperature %}
    {% endif %}
    # store the other variables
    {% set ival = printer["gcode_macro PRINT_START"].soak_ival %}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=extruder VALUE={EXTRUDER_TEMP|int}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_chamber VALUE={CHAMBER_TEMP|int - DELTA_C|int}
    {% if EXTRA_SOAK == 'true' %}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tchamber VALUE={CHAMBER_SOAK|int * 60}
    {% else %}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tchamber VALUE=0
    {% endif %}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_ival VALUE={ival}
    #############  Variable Setup  #############
    M141 S{CHAMBER_TEMP|int} ; set exhaust fan
    G28 ; home to get toolhead in the middle
    # check if soak time is 0 or if the bed is still hot
    {% if (SOAK|int <= 0) or (actTemp|int >= targetTemp|int) %}
      M117 Heating Extruder
      {action_respond_info("Bed act temp=%3d target=%3d (target(%3d) - delta(%d)) heat soak not needed" % (actTemp|int,targetTemp|int,BED_TEMP|int,DELTA_B|int))}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=redo_qgl VALUE='"false"'
      M140 S{BED_TEMP|int}      ; heat bed and wait  
      M109 S{EXTRUDER_TEMP|int} ; heat extruder and wait
      # go to chamber soak wait
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=status VALUE='"Chamber"'
      M400
      PAUSE
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.1
    {% else %}
      M117 Heating Bed
      {action_respond_info("Bed act temp=%3d target=%3d (target(%3d) - delta(%d)) heat soak needed" % (actTemp|int,targetTemp|int,BED_TEMP|int,DELTA_B|int))}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=redo_qgl VALUE='"true"'
      M106 S90  ; switch part cooling ~35% to move air in chamber
      M190 S{BED_TEMP|int}  ; heat bed and wait
      ## Call the wait macro the first time
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=status VALUE='"HeatSoak"'
      M400
      PAUSE
      _print_time TEXT="HEAT SOAK" TIME={SOAK|int * 60}
      {% if SOAK|int * 60 > ival|int %}
        # soak time is bigger than interval 
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tval VALUE={(SOAK|int * 60) - ival|int}
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={ival|int}
      {% else %}
        # soak time is smaller than interval
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tval VALUE=0
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={SOAK|int * 60}
      {% endif %}
    {% endif%}    
  ## Heatsoak Phase call the delay macro until time is over
  {% elif printer["gcode_macro PRINT_START"].status == 'HeatSoak' %}
    # store variables for easier reading 
    {% set ival = printer["gcode_macro PRINT_START"].soak_ival %}
    {% set tval = printer["gcode_macro PRINT_START"].soak_tval %}
    # switch on extruder at around 2 min left 
    {% if (tval|int) <= 120 + (EXTRUDER_TEMP|int) - 240  %}
      {%if EXTRUDER_TEMP|int != printer.extruder.target|int %}
        RESUME
        M104 S{EXTRUDER_TEMP}
        M400
        PAUSE
      {% endif %}
    {% endif %}
    # check remaining time 
    {% if tval|int > 0 %}
      # check if interval is bigger than remaining time
      {% if ival >= tval %}
        # run last loop with time
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tval VALUE=0
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={tval|int}
      {% else %}
        ## reduce time by interval
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tval VALUE={tval|int - ival|int}
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={ival|int}
      {% endif %}
    {% else %}
      # go to chamber soak wait
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=status VALUE='"Chamber"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.1
    {% endif %}
      ## all whats need to run after Heat Soak
  {% elif printer["gcode_macro PRINT_START"].status == 'Chamber' %}
    # store variables for easier reading 
    {% set ival = printer["gcode_macro PRINT_START"].soak_ival %}
    {% set tval = printer["gcode_macro PRINT_START"].soak_tchamber %}
    {% set targetTemp = printer["gcode_macro PRINT_START"].soak_chamber %}
    {% set actTemp = printer['temperature_fan chamber'].temperature %}
    # check remaining time and temp difference 
    {% if (tval|int > 0) or (actTemp|int < targetTemp|int) %}
      # print info only add firt run
      {% if printer["gcode_macro PRINT_START"].first == 'true' %}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=first VALUE='"false"'
        {action_respond_info("Chamber act temp=%3d target=%3d heat soak needed" % (actTemp|int,targetTemp|int))}
        _print_time TEXT="CHAMBER" TIME={tval|int}
      {% endif %}
      # check if interval is bigger than remaining time
      {% if ival >= tval %}
        # run last loop with time
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tchamber VALUE=0
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={tval|int}
      {% else %}
        ## reduce time by interval
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tchamber VALUE={tval|int - ival|int}
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={ival|int}
      {% endif %}
    {% else %}
      # Finish PRINT_START
      {action_respond_info("Chamber act temp=%3d target=%3d heat soak not needed" % (actTemp|int,targetTemp|int))}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=status VALUE='"Final"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.1
    {% endif %}
  ## all whats need to run at the end
  {% elif printer["gcode_macro PRINT_START"].status == 'Final' %}
    # set RESUME
    RESUME
    # set staus back to prepare for the next run 
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=status VALUE='"Prepare"'     
    M106 S0  ; turn off part cooling fan
    G21  ; set units to millimeters
    G90  ; use absolute coordinates
    M83  ; use relative distances for extrusion
    _G32 ; home & QGL
    # Extruder is disabled while using the probe
    # need to wait to reach target again
    M117 Heating Extruder
    M109 S{EXTRUDER_TEMP|int}
    NOZZLECLEAN
    G28 Z
    # Extruder is disabled while using the probe
    # need to wait to reach target again
    M117 Heating Extruder
    M109 S{EXTRUDER_TEMP|int}
    M117 making Prime Line
    PRIME_LINE
    M117 printing
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=activ VALUE='"false"'
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  {% endif %}
 
## Wait interval macro to break the loop
[delayed_gcode _START_PRINT_WAIT]
## use UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT Duration=1
gcode:
  # store variables for easier reading 
  {% set extruder = printer["gcode_macro PRINT_START"].extruder %}
  # Print remaining time
  {% if printer["gcode_macro PRINT_START"].status == 'HeatSoak' %}
    {% set tval = printer["gcode_macro PRINT_START"].soak_tval %}
    _print_time TEXT="HEAT SOAK" TIME={tval|int}
  {% elif printer["gcode_macro PRINT_START"].status == 'Chamber' %}
    {% set tval = printer["gcode_macro PRINT_START"].soak_tchamber %}
    _print_time TEXT="SOAK" TIME={tval|int}
  {% endif %}
  # Check if printer is still in state 'Printing'
  {% if printer["gcode_macro CANCEL_PRINT"].execute == 'false' %}
    # Junp back to PRINT_START
    PRINT_START EXTRUDER_TEMP={extruder|int}
  {% else %}
    # break loop
    # insure state is correct for the next print start
    SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE='"false"'
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=activ VALUE='"false"'
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=status VALUE='"Prepare"'
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  {% endif %}

[gcode_macro _G32]
gcode:
  BED_MESH_CLEAR
  M117 Home & QGL
  # Home only if needed 
  _CG28
  ## check if QGL was already executed
  ## variable redo_qgl will always force a QGL
  {% if printer["gcode_macro PRINT_START"].redo_qgl == 'true' %}
    {action_respond_info("QGL because of variable redo_qgl")}
    QUAD_GANTRY_LEVEL
  {% else %} 
    ## if no QGL was done until now
    {% if printer["gcode_macro QUAD_GANTRY_LEVEL"].qgl_done == 'false' %}
      {action_respond_info("QGL because of variable qgl_done")}
      QUAD_GANTRY_LEVEL
    {% endif %}
  {% endif %}
  ## get the head to the middle
  G0 X175 Y175 Z50 F6000
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1

## Print time output
[gcode_macro _print_time]
gcode:
default_parameter_TEXT: 'Timer'
## true ot false
default_parameter_SHOW_AR: 'false'

## Empty the screen ofter duration
[delayed_gcode _CLEAR_DISPLAY]
gcode:
  M117
  
## customize QUAD GANTRY LEVEL gcode 
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: BASE_QUAD_GANTRY_LEVEL
variable_qgl_done: 'false'
gcode:
  ## reduce current of Z motors
  SET_TMC_CURRENT STEPPER=stepper_z  CURRENT=0.3 HOLDCURRENT=0.3
  SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT=0.3 HOLDCURRENT=0.3
  SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT=0.3 HOLDCURRENT=0.3
  SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT=0.3 HOLDCURRENT=0.3
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  BASE_QUAD_GANTRY_LEVEL
  G28 Z
  ## return to org current settings
  {% set config = printer.configfile.config %}
  SET_TMC_CURRENT STEPPER=stepper_z  CURRENT={config["tmc2209 stepper_z"]["run_current"]}  HOLDCURRENT={config["tmc2209 stepper_z"]["hold_current"]}
  SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={config["tmc2209 stepper_z1"]["run_current"]} HOLDCURRENT={config["tmc2209 stepper_z1"]["hold_current"]}
  SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={config["tmc2209 stepper_z2"]["run_current"]} HOLDCURRENT={config["tmc2209 stepper_z2"]["hold_current"]}
  SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={config["tmc2209 stepper_z3"]["run_current"]} HOLDCURRENT={config["tmc2209 stepper_z3"]["hold_current"]} 
  M400
  SET_GCODE_VARIABLE MACRO=QUAD_GANTRY_LEVEL VARIABLE=qgl_done VALUE='"true"'

## overload for Default macros /PAUSE/RESUME/CANCEL_PRINT
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
variable_execute: 'false'
gcode:
  SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE='"true"'
  M117 Ready
  M104 S0
  M140 S0
  M141 S0
  M106 S0
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  _ADD_PRINT_TIME
  BASE_CANCEL_PRINT
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
default_parameter_X: 350
default_parameter_Y: 350
default_parameter_Z: 10
gcode:
  ## PRINT_START only need the BASE funktionality
  {% if printer["gcode_macro PRINT_START"].activ == 'true' %}
    BASE_PAUSE
  {% else %}
    SAVE_GCODE_STATE NAME=PAUSE_state
    M117 Pause
    BASE_PAUSE
    G91
    G1 E-1.7 F2100
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F6000
    G91
    _ADD_PRINT_TIME
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
  ## PRINT_START only need the BASE funktionality
  {% if printer["gcode_macro PRINT_START"].activ == 'true' %}
    BASE_RESUME
  {% else %}
    M117 Printing
    G91
    G1 E1.7 F2100
    G91
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  {% endif %}