[delayed_gcode homeatstartup]
initial_duration: 5
gcode:
  g28

[idle_timeout]
gcode:
   TURN_OFF_HEATERS
# 60 min
timeout: 7200

[gcode_arcs]
resolution: 0.1

#####################################################################
#  Macros
#####################################################################
[gcode_macro PRINT_START]
default_parameter_BED_TEMP: 100
default_parameter_EXTRUDER_TEMP: 245
default_parameter_SOAK: 30
default_parameter_DELTA: 10
gcode:
    # get actual temp from the bed either use an external sensor
    # or the sensor from the bed heater
    # external sensor must be named bed
    {% if 'temperature_sensor bed' in printer %}
       {% set actTemp = printer['temperature_sensor bed'].temperature %}
    {% else %}
        {% set actTemp = printer.heater_bed.temperature %}
    {% endif %}
    # switch knob to red (blinking)
    # use solid red in the moment
    LCD_RED 
    M141 S50       ; set exhaust fan to 50C
    CASELIGHT_ON
    G28            ; home to get toolhead in the middle
    # check if soak time is 0 or if the bed is still hotend
    # if the bed is within the Variable DELTA C to the target temp no heat soaak needs to be performed
    {% if (SOAK|int) <= 0 or (actTemp|int >= BED_TEMP|int - DELTA|int) %}
      M117 Heating Extruder
      {action_respond_info(" Bed act temp=%3d no heat soak needed" % (actTemp|int))}
      M140 S{BED_TEMP|int}      ; set temp only to be sure    
      M104 S{EXTRUDER_TEMP|int} ; heat extruder and wait
    {% else %}
      M117 Heating Bed
      {action_respond_info(" Bed act temp=%3d heat soak needed" % (actTemp|int))}
      M106 S90  ; switch part cooling ~35% to move air in chamber
      M190 S{BED_TEMP|int}  ; heat bed and wait
        {% for timer in range( (SOAK|int * 60),0,-1) %}
          M117 Heat soak {(timer|int // 60) }:{ '%02d' %  (timer|int - (60 * (timer|int // 60)))}
          {% if (timer|int) == 120 + (EXTRUDER_TEMP|int) - 240  %}
            M104 S{EXTRUDER_TEMP}
          {% endif %}
          G4 P1000
        {% endfor %}
    M117 Preheat done
    {% endif %}
    M106 S0  ; turn off part cooling fan
    # switch knob to red (solid)
    LCD_RED
    G21  ; set units to millimeters
    G90  ; use absolute coordinates
    M83  ; use relative distances for extrusion
    G32  ; home & QGL
    # Extruder is disabled while using the probe
    # need to wait to reach target again
    M117 Heating Extruder
    M109 S{EXTRUDER_TEMP|int}
    # Extruder is disabled while using the probe
    # need to wait to reach target again
    NOZZLECLEAN
    G28 Z
    M117 Heating Extruder
    M109 S{EXTRUDER_TEMP|int}
    PRIME_LINE
    M117

[gcode_macro PRINT_END]
variable_print_done: 0
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS               ; turn off heaters
    M107                           ; turn off fan
    M141 S20                       ; vent chamber (setting fan to below ambient)
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0 X55 Y352 F3600              ; park nozzle at brush bin
    # switch knob to red (green)
    LCD_GREEN
    CASELIGHT_OFF
    M117
    SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=print_done VALUE=1

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    M117 Home & QGL
    # Home only if needed 
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    ## check if QGL was already executed
    {% if (printer["gcode_macro QUAD_GANTRY_LEVEL"].qgl_done|int) != 1 %}
        QUAD_GANTRY_LEVEL
    {% endif %}
    G0 X175 Y175 Z50 F6000

##  Load Filament (Afterburner)
[gcode_macro LOAD_FILAMENT]
gcode:
# store min extrution temp in variable
    {% set minTemp = printer.configfile.config["extruder"]["min_extrude_temp"] %}
    SAVE_GCODE_STATE NAME=STATE_LOAD_FILAMENT
    {% if printer.idle_timeout.state != "Printing" %}
      ## Move to waste bin
      CG28                  ; home is needed
      G90                   ; absolute positioning
      G0 X55 Y352 Z30 F6000 ; park nozzle at brush bin
      {% if printer.extruder.temperature|int < minTemp|int %}
        {action_respond_info("Extruder Temp to low heat to %2d" % (minTemp|int + 30))}
        M109 S{minTemp|int + 30}
      {% endif %}   
      M83                   ; set extruder to relative
      G1 E30 F1800          ; quickly load 30mm filament
      G1 E50 F300           ; slower extrusion for hotend path
      G1 E10 F150           ; prime nozzle with filament
    {% else %}
      { action_respond_info("Filament unloading disabled while printing!") }
    {% endif %}
    RESTORE_GCODE_STATE NAME=STATE_LOAD_FILAMENT

##  Remove Filament (Afterburner)
[gcode_macro UNLOAD_FILAMENT]
gcode:
# store min extrution temp in variable
    {% set minTemp = printer.configfile.config["extruder"]["min_extrude_temp"] %}
    SAVE_GCODE_STATE NAME=STATE_UNLOAD_FILAMENT
    {% if printer.idle_timeout.state != "Printing" %}
      #check the Extruder temp is above minimum extrution temp
      {% if printer.extruder.temperature|int < minTemp|int %}
        {action_respond_info("Extruder Temp to low heat to %2d" % (minTemp|int + 30))}
        M109 S{minTemp|int + 30}
      {% endif %}
      M83               ; set extruder to relative
      G1 E5 F300        ; extrude a little to soften tip
      G1 E-100 F1800    ; retract filament completely
    {% else %}
      { action_respond_info("Filament unloading disabled while printing!") }
    {% endif %}  
    RESTORE_GCODE_STATE NAME=STATE_UNLOAD_FILAMENT

##  Babystepping (ZUP / ZDOWN)  Does not save to config.
[gcode_macro ZDOWN]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1

[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.025 MOVE=1

[gcode_macro MOVE_TO_BUCKET]
gcode:
    G1 X52 Y354 F18000
    G1 Z10 F5000        ;move to purge bucket location
    G1 Z2.10 F5000                ;lower Z

## purge and clean the nozzle in prep for printing
[gcode_macro NOZZLECLEAN]
gcode:
# store min extrution temp in variable
    {% set minTemp = printer.configfile.config["extruder"]["min_extrude_temp"] %}
    SAVE_GCODE_STATE Name=STATE_NOZZLECLEAN
    M117 clean Nozzle
    CG28
    G90                          ;absolute positioning
    G1 X52 Y354 F18000           ;move to purge bucket location
    G1 Z10 F5000                ;lower Z
    #check the Extruder temp is above minimum extrution temp
    {% if printer.extruder.temperature|int < minTemp|int %}
        {action_respond_info("Extruder Temp to low heat to %2d" % (minTemp|int + 30))}
        M109 S{minTemp|int + 30}
    {% endif %}
    G1 Z2.10 F5000  
    G91 
    G1 E10.00 F500         ; purge filament (10mm)
    G1 E10.00 F800         ; purge filament (10mm)
    G1 E-0.5 F800          ; retract filament (0.5)
    G4 P1000
    WIPE
    RESTORE_GCODE_STATE Name=STATE_NOZZLECLEAN

[gcode_macro WIPE]
gcode:
    G90
    # move to wiper start pos
    G0 X52.00 Y354 Z2.10 F3000
    # move head diagonal to brush
    {% for wipe in range(10) %}
      {% for coordinate in [(82,354),(132,354)] %}
        G0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} F18000
      {% endfor %}
    {% endfor %}

[gcode_macro PRIME_LINE]
gcode:
    SAVE_GCODE_STATE NAME=STATE_PRIME_LINE
    M117 Prime Line
    CG28
    G92 E0                              ;Reset Extruder
    G1 Z5.0 F3000                    ;Move Z Axis up
    G1 X5 Y5 Z0.85 F30000;             ;Move to start position (1,30,.24)
    G1 X25 Y5 E40 F100;     ;Draw the second line
    G92 E0                              ;Reset Extruder
    G1 Z10.0 F3000                       ;Move Z Axis up
    RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE

#[gcode_macro PURGE_LINES]
#gcode:
#    SAVE_GCODE_STATE NAME=STATE_PURGE_LINE
#    G92 E0                             ; Reset extruder
#    G1 X50.0 Y30.0 Z0.3 F5000.0        ; Move to start point
#    G1 X150.0 Y30 Z0.3 F1500.0 E30     ; Move and purge
#    G1 X325.0 Y30 Z5.0 F5000.0         ; move faster
#    G92 E0                             ; Reset extruder
#    RESTORE_GCODE_STATE NAME=STATE_PURGE_LINE

## Different Park positions
[gcode_macro PARKFRONT]
gcode:
    CG28                                  ; Home if not already homed
    SAVE_GCODE_STATE NAME=STATE_PARKFRONT
    G90                                   ; absolute positioning
    G0 X175 Y30 Z175 F18000
    RESTORE_GCODE_STATE NAME=STATE_PARKFRONT

[gcode_macro PARKREAR]
gcode:
    CG28                                  ; Home if not already homed
    SAVE_GCODE_STATE NAME=STATE_PARKREAR
    G90                                   ; absolute positioning
    G0 X10 Y340 Z250 F18000
    RESTORE_GCODE_STATE NAME=STATE_PARKREAR

[gcode_macro PARKCENTER]
gcode:
    CG28                                  ; Home if not already homed
    SAVE_GCODE_STATE NAME=STATE_PARKCENTER
    G90                                   ; absolute positioning
    G0 X175 Y175 Z175 F18000
    RESTORE_GCODE_STATE NAME=STATE_PARKCENTER

[gcode_macro PARKBED]
gcode:
    CG28                                  ; Home if not already homed
    SAVE_GCODE_STATE NAME=STATE_PARKBED
    G90                                   ; absolute positioning
    G0 X175 Y175 Z10 F18000
    RESTORE_GCODE_STATE NAME=STATE_PARKBED

#get head to middle and shutoff PI
[gcode_macro SHUTDOWN_PI]
gcode:
    {action_call_remote_method("shutdown_machine")}

[gcode_macro PRINTER_OFF]
gcode:
    PARKBED
    M117 PI Off in 5 sec
    G4 P5000
    M400
    SHUTDOWN_PI

[gcode_macro SAFE_MOVE_UP]
gcode:
    SAVE_GCODE_STATE NAME=SAFE_MOVE_UP_state
    {% if (printer.toolhead.position.z > 220 and printer.toolhead.position.z < 280) %}
        G90             ; absolute positioning
        G1 Z280         ; move Z Axis up
    {% else %}
        G91             ; relative positioning
        G1 Z100         ; move Z Axis up
    {% endif %}
    RESTORE_GCODE_STATE NAME=SAFE_MOVE_UP_state

## Ajust z-Offset relative to bed temp
#[gcode_macro TEMPADJUSTOFFSET]
#gcode:
#    #ABS
#    {% if printer.heater_bed.target >= 100 %}
#    {% endif %}
#    #PETG
#    {% if printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
#        SET_GCODE_OFFSET Z=0 MOVE=1
#        SET_GCODE_OFFSET Z_ADJUST=-0#.025 MOVE=1
#    {% endif %}
#    #PLA
#    {% if printer.heater_bed.target <= 65 %}
#        SET_GCODE_OFFSET Z=0 MOVE=1
#        SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1
#    {% endif %}

## Ajust Presure advance relative to bed temp
#gcode_macro TEMPADJUSTPA]
#gcode:
#    #ABS
#    {% if printer.heater_bed.target >= 100 %}
#        SET_PRESSURE_ADVANCE ADVANCE=0.05585
#    {% endif %}
#    #PETG
#    {% if printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
#        SET_PRESSURE_ADVANCE ADVANCE=0.0785
#    {% endif %}
#    #PLA
#    {% if printer.heater_bed.target <= 65 %}
#        SET_PRESSURE_ADVANCE ADVANCE=0.0325
#    {% endif %}

[gcode_macro Z_ENDSTOP_CALIBRATE_MACRO]
gcode:
    BED_MESH_CLEAR	; Clear loaded mesh before G28
	{% if "z" not in printer.toolhead.homed_axes %} ; G28 Home if needed
        G28             ; move to origin
    {% endif %}
	G28 Z
	G32             ; quad gantry levelling
    G28 Z
    G1 X175 Y175 Z10 F10000
    Z_ENDSTOP_CALIBRATE

[gcode_macro PRINT_VARIABLE] 
gcode:
   {% for name1 in printer %}
     {% for name2 in printer[name1] %}
       { action_respond_info("printer['%s'].%s = %s"
         % (name1, name2, printer[name1][name2])) }
       {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
       {% endfor %}
     {% endfor %}